server {
    listen 6061;
    # gzip config
    gzip on;
    # 启用gzip压缩的最小文件，小于设置值的文件将不会压缩
    gzip_min_length 1k;
    # gzip 压缩级别，1-10，数字越大压缩的越好，也越占用CPU时间。一般设置1和2
    # gzip_comp_level 9;
    # 进行压缩的文件类型。javascript有多种形式。其中的值可以在 mime.types 文件中找到。
    gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;
    gzip_vary on;
    gzip_disable "MSIE [1-6]\.";
    # 设置缓存路径并且使用一块最大100M的共享内存，用于硬盘上的文件索引，包括文件名和请求次数，每个文件在1天内若不活跃（无请求）则从硬盘上淘汰，硬盘缓存最大10G，满了则根据LRU算法自动清除缓存。
    # proxy_cache_path D:/wsp/cache/nginx/cache levels=1:2 keys_zone=imgcache:100m inactive=1d max_size=10g;

    ## 程序入口页面
    location / {
        # 指向我们打包后上传的前端文件
        root /var/www;
        index index.html;
        try_files $uri $uri/ /index.html;
    }

    ## 后台服务
    location /api/ {
        rewrite ^/api/(.*)$ /$1 break;
        proxy_pass http://web.server.ip:6060/api;
        client_max_body_size 100m;
    }
  
    ### 针对长期不动的更新不频繁的进行缓存
    location ^~/static/
    {
        alias /var/www/static/;
        # 将缓存策略用if语句写在location里面，生效了
        if ($request_filename ~* .*\.(?:htm|html)$)
        {
            add_header Cache-Control "private, no-store, no-cache, must-revalidate, proxy-revalidate";
        }

        if ($request_filename ~* .*\.(?:js|css)$)
        {
            expires      1d;
        }

        if ($request_filename ~* .*\.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm)$)
        {
            expires      1d;
        }
    }

}